booksTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "bookId"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "bookId"
        KeyType: "HASH"
    Tags:
      - Key: Name
        Value: books-table

orderTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userId"
        AttributeType: "S"
      - AttributeName: "orderId"
        AttributeType: "S"
      - AttributeName: "bookId"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    Tags:
      - Key: Name
        Value: order-table

cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - "email"
    UserPoolName: "YouTubeBookStoreUserPool"

cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: "Web"
    UserPoolId: !Ref cognitoUserPool

cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Admin users belong to this group"
    GroupName: "Admin"
    Precedence: 0
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

cognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "This is the IAM role that admin group users assume"
    Policies:
      - PolicyName: "youtube-book-store-admin-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt orderTable.Arn
    RoleName: "youtube-book-store-admin-role"

cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Customers belong to this group"
    GroupName: "Customer"
    Precedence: 1
    RoleArn: !GetAtt cognitoCustomerIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

cognitoCustomerIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Description: "This is the IAM role that customer group users assume"
    Policies:
      - PolicyName: "youtube-book-store-customer-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource:
                - !GetAtt orderTable.Arn
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:BatchGetItem"
              Resource:
                - !GetAtt booksTable.Arn
    RoleName: "youtube-book-store-customer-role"

cognitoUnauthIAMRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: "youtube-bookstore-unauth-role"
    Description: "IAM role for guest users"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Federated:
              - "cognito-identity.amazonaws.com"
          Action:
            - "sts:AssumeRoleWithWebIdentity"
    Policies:
      - PolicyName: "youtube-bookstore-unauth-user-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "appsync:GraphQL"
              Resource:
                - Fn::Join:
                    - ""
                    - - !Ref GraphQlApi
                      - "/types/Query/fields/getBookById"

cognitoIdentityPoolRoleAttachment:
  Type: AWS::Cognito::IdentityPoolRoleAttachment
  Properties:
    IdentityPoolId: !Ref cognitoIdentityPool
    Roles:
      unauthenticated: !GetAtt cognitoUnauthIAMRole.Arn

cognitoIdentityPool:
  Type: AWS::Cognito::IdentityPool
  Properties:
    AllowUnauthenticatedIdentities: true
    CognitoIdentityProviders:
      - ClientId: !Ref cognitoUserPoolClient
        ProviderName: !GetAtt cognitoUserPool.ProviderName
    IdentityPoolName: YoutubeBookStoreIdentityPool
